Python Programming Study Notes

Data Structures:
1. Lists - Ordered, mutable collections
   - list.append(item) - adds to end
   - list.insert(index, item) - adds at position
   - list.remove(item) - removes first occurrence
   - List comprehensions: [x*2 for x in range(10)]

2. Dictionaries - Key-value pairs
   - dict.get(key, default) - safe access
   - dict.keys(), dict.values(), dict.items()
   - Dictionary comprehensions: {k: v for k, v in pairs}

3. Sets - Unordered, unique elements
   - set.add(item), set.remove(item)
   - Set operations: union, intersection, difference

Object-Oriented Programming:
- Classes define blueprints for objects
- __init__ method is the constructor
- self refers to the instance
- Inheritance: class Child(Parent):
- Polymorphism through method overriding

Important Libraries:
1. NumPy - Numerical computing
   - np.array() for efficient arrays
   - Broadcasting for element-wise operations
   - Linear algebra functions

2. Pandas - Data manipulation
   - DataFrames for tabular data
   - pd.read_csv(), pd.to_csv()
   - groupby() for aggregations

3. Matplotlib - Data visualization
   - plt.plot() for line plots
   - plt.scatter() for scatter plots
   - plt.subplots() for multiple plots

Best Practices:
- Use meaningful variable names
- Follow PEP 8 style guide
- Write docstrings for functions
- Use virtual environments
- Write unit tests
- Handle exceptions properly

Practice Projects:
1. Web scraper using requests and BeautifulSoup
2. Data analysis project with pandas
3. API using Flask or FastAPI
4. Machine learning model with scikit-learn

Resources:
- Python.org official documentation
- "Automate the Boring Stuff" book
- Codecademy Python course
- LeetCode for coding practice

Next Topics to Study:
- Decorators and context managers
- Async programming with asyncio
- Web frameworks (Django/Flask)
- Testing with pytest